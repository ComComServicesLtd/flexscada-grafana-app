{"version":3,"sources":["../../../src/components/config/config.js"],"names":["configTemplate","_","FlexscadaConfigCtrl","$scope","$injector","$q","backendSrv","alertSrv","validKey","quotas","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","org","appModel","jsonData","secureJsonData","enabled","validateKey","apiKeySet","self","p","get","then","resp","millionChecksPerMonth","Math","ceil","parseInt","checksPerMonth","strChecksPerMonth","set","statusText","model","resolve","apiKey","errorMsg","reject","initDatasource","importDashboards","url","message","datasourceSet","results","foundFlexscada","forEach","ds","name","promises","flexscada","type","access","APIVersion","push","post","all","template"],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nimport _ from 'lodash' ;\n\nclass FlexscadaConfigCtrl {\n  constructor($scope, $injector, $q, backendSrv, alertSrv) {\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.alertSrv = alertSrv;\n    this.validKey = false;\n    this.quotas = {};\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n    this.org = null;\n\n    if (this.appModel.jsonData === null) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n    if (this.appModel.enabled) {\n      this.validateKey();\n    }\n  }\n\n  reset() {\n    this.appModel.jsonData.apiKeySet=false;\n    this.validKey = false;\n    this.org = null;\n  }\n\n  validateKey() {\n    var self = this;\n    \n      self.validKey = true;\n     \n      /*\n        self.alertSrv.set(\"failed to verify apiKey\", resp.statusText, 'error', 10000);\n        self.appModel.enabled = false;\n        self.appModel.jsonData.apiKeySet = false;\n        self.appModel.secureJsonData.apiKey = \"\";\n        self.errorMsg = \"invalid apiKey\";\n        self.validKey = false;\n        */\n      \n  }\n\n  getOrgDetails() {\n      return;\n    var self = this;\n    var p = this.backendSrv.get('api/plugin-proxy/flexscada-app/api/grafana-net/profile/org');\n    p.then((resp) => {\n      self.org = resp;\n\n      const millionChecksPerMonth = Math.ceil(parseInt(self.org.checksPerMonth, 10) / 100000) / 10;\n      if (millionChecksPerMonth > 1000) {\n        self.org.strChecksPerMonth = Math.ceil(millionChecksPerMonth / 1000) + ' Billion';\n      } else if (millionChecksPerMonth > 0) {\n        self.org.strChecksPerMonth = millionChecksPerMonth + ' Million';\n      } else {\n        self.org.strChecksPerMonth = 'N/A';\n      }\n    }, (resp) => {\n      self.alertSrv.set(\"failed to get Org Details\", resp.statusText, 'error', 10000);\n    });\n    return p;\n  }\n\n  preUpdate() {\n    var model = this.appModel;\n    if (!model.enabled) {\n      return this.$q.resolve();\n    }\n\n    if (!model.jsonData.apiKeySet && !model.secureJsonData.apiKey) {\n      model.enabled = false;\n      this.errorMsg = \"apiKey not set\";\n      this.validKey = false;\n      return this.$q.reject(\"apiKey not set.\");\n    }\n    model.jsonData.apiKeySet = true;\n    return this.initDatasource();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return this.$q.resolve();\n    }\n    var self = this;\n    return this.validateKey()\n    .then(() => {\n      return self.appEditCtrl.importDashboards().then(() => {\n        return {\n          url: \"dashboard/db/flexscada-home\",\n          message: \"FlexSCADA app installed!\"\n        };\n      });\n    });\n  }\n\n  configureDatasource() {\n    this.appModel.jsonData.datasourceSet = false;\n    this.initDatasource().then(() => {\n      this.appModel.jsonData.datasourceSet = true;\n    });\n  }\n\n  initDatasource() {\n    var self = this;\n    \n    \n    //check for existing datasource.\n    var p = self.backendSrv.get('/api/datasources');\n    p.then(function(results) {\n      var foundFlexscada = false;\n      _.forEach(results, function(ds) {\n        if (foundFlexscada) { return; }\n        if (ds.name === \"flexscada\") {\n          foundFlexscada = true;\n        }\n      });\n\n      var promises = [];\n      if (!foundFlexscada) {\n        // create datasource.\n        var flexscada = {\n          name: 'flexscada',\n          type: 'flexscada-datasource',\n          url: 'api/plugin-proxy/flexscada-app',\n          access: 'direct',\n          jsonData: {\n              APIVersion: \"v1\"\n        }\n        };\n        promises.push(self.backendSrv.post('/api/datasources', flexscada));\n      }\n      return self.$q.all(promises);\n    });\n    return p;\n  }\n}\n\nFlexscadaConfigCtrl.template = configTemplate;\n\nexport {\n  FlexscadaConfigCtrl as ConfigCtrl\n};\n"]}