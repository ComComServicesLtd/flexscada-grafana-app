{"version":3,"sources":["../../../src/components/analysis/downsample.js"],"names":["dygraph_downsample","points","threshold","aggregation","sampled","bar_width","canvasx","ratio","Math","round","total_value","total_count","i","length","canvasy","push","max_value","min_value","value","abs","Downsample","data","data_length","sampled_index","every","a","max_area_point","max_area","area","next_a","avg_x","avg_y","avg_range_start","floor","avg_range_end","avg_range_length","range_offs","range_to","point_a_x","point_a_y","DYDownsample"],"mappings":"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","file":"downsample.js","sourcesContent":["export const floor = Math.floor;\nexport const abs = Math.abs;\n\n\n\n\n\n\nexport function dygraph_downsample(points, threshold, aggregation) {\n\n  var sampled = [];\n\n  var bar_width = 2 / 3 * (points[1].canvasx - points[0].canvasx);\n\n\n  var ratio = 1 / bar_width;\n  if (ratio <= 1) {\n    return points;\n  } else {\n    bar_width = 1;\n    ratio = Math.round(ratio);\n  }\n\n\n\n\n  if (aggregation === 'avg') {\n    var total_value = 0;\n    var total_count = 0;\n\n    for (var i = 0; i < points.length; i++) {\n\n      if (total_count < ratio) {\n        total_value += points[i].canvasy;\n        total_count++;\n        if (total_count === ratio) {\n          sampled.push({\n            canvasx: points[i].canvasx,\n            canvasy: total_value / total_count\n\n          });\n          total_value = 0;\n          total_count = 0;\n        }\n\n      }\n\n    }\n  } else if (aggregation == 'max') {\n\n    var max_value = 0;\n    var min_value = 0;\n    var total_count = 0;\n    for (var i = 0; i < points.length; i++) {\n\n      if (total_count < ratio) {\n        if (points[i].canvasy > max_value) {\n          max_value = points[i].canvasy;\n        }\n        if (points[i].canvasy < min_value) {\n          min_value = points[i].canvasy;\n        }\n        total_count++;\n        if (total_count === ratio) {\n\n\n          var value = min_value;\n          if (Math.abs(max_value) > Math.abs(min_value))\n            value = max_value;\n\n          sampled.push({\n            canvasx: points[i].canvasx,\n            canvasy: value\n\n          });\n\n          max_value = 0;\n          min_value = 0;\n          total_count = 0;\n        }\n\n      }\n\n    }\n\n  }\n\n\n  return sampled;\n\n}\n\nexport function Downsample(data, threshold) {\n\n  var data_length = data.length;\n  if (threshold >= data_length || threshold === 0) {\n    return data; // Nothing to do\n  }\n\n  var sampled = [],\n    sampled_index = 0;\n\n  // Bucket size. Leave room for start and end data points\n  var every = (data_length - 2) / (threshold - 2);\n\n  var a = 0, // Initially a is the first point in the triangle\n    max_area_point,\n    max_area,\n    area,\n    next_a;\n\n  sampled[sampled_index++] = data[a]; // Always add the first point\n\n  for (var i = 0; i < threshold - 2; i++) {\n\n    // Calculate point average for next bucket (containing c)\n    var avg_x = 0,\n      avg_y = 0,\n      avg_range_start = floor((i + 1) * every) + 1,\n      avg_range_end = floor((i + 2) * every) + 1;\n    avg_range_end = avg_range_end < data_length ? avg_range_end : data_length;\n\n    var avg_range_length = avg_range_end - avg_range_start;\n\n    for (; avg_range_start < avg_range_end; avg_range_start++) {\n      avg_x += data[avg_range_start][0] * 1; // * 1 enforces Number (value may be Date)\n      avg_y += data[avg_range_start][1] * 1;\n    }\n    avg_x /= avg_range_length;\n    avg_y /= avg_range_length;\n\n    // Get the range for this bucket\n    var range_offs = floor((i + 0) * every) + 1,\n      range_to = floor((i + 1) * every) + 1;\n\n    // Point a\n    var point_a_x = data[a][0] * 1, // enforce Number (value may be Date)\n      point_a_y = data[a][1] * 1;\n\n    max_area = area = -1;\n\n    for (; range_offs < range_to; range_offs++) {\n      // Calculate triangle area over three buckets\n      area = abs((point_a_x - avg_x) * (data[range_offs][1] - point_a_y) -\n        (point_a_x - data[range_offs][0]) * (avg_y - point_a_y)\n      ) * 0.5;\n      if (area > max_area) {\n        max_area = area;\n        max_area_point = data[range_offs];\n        next_a = range_offs; // Next a is this b\n      }\n    }\n\n    sampled[sampled_index++] = max_area_point; // Pick this point from the bucket\n    a = next_a; // This a is the next a (chosen b)\n  }\n\n  sampled[sampled_index++] = data[data_length - 1]; // Always add last\n\n  return sampled;\n}\n\nexport function DYDownsample(data, threshold) {\n\n  var data_length = data.length;\n  if (threshold >= data_length || threshold === 0) {\n    return data; // Nothing to do\n  }\n\n  var sampled = [],\n    sampled_index = 0;\n\n  // Bucket size. Leave room for start and end data points\n  var every = (data_length - 2) / (threshold - 2);\n\n  var a = 0, // Initially a is the first point in the triangle\n    max_area_point,\n    max_area,\n    area,\n    next_a;\n\n  sampled[sampled_index++] = data[a]; // Always add the first point\n\n  for (var i = 0; i < threshold - 2; i++) {\n\n    // Calculate point average for next bucket (containing c)\n    var avg_x = 0,\n      avg_y = 0,\n      avg_range_start = floor((i + 1) * every) + 1,\n      avg_range_end = floor((i + 2) * every) + 1;\n    avg_range_end = avg_range_end < data_length ? avg_range_end : data_length;\n\n    var avg_range_length = avg_range_end - avg_range_start;\n\n    for (; avg_range_start < avg_range_end; avg_range_start++) {\n      avg_x += data[avg_range_start].canvasx * 1; // * 1 enforces Number (value may be Date)\n      avg_y += data[avg_range_start].canvasy * 1;\n    }\n    avg_x /= avg_range_length;\n    avg_y /= avg_range_length;\n\n    // Get the range for this bucket\n    var range_offs = floor((i + 0) * every) + 1,\n      range_to = floor((i + 1) * every) + 1;\n\n    // Point a\n    var point_a_x = data[a].canvasx * 1, // enforce Number (value may be Date)\n      point_a_y = data[a].canvasy * 1;\n\n    max_area = area = -1;\n\n    for (; range_offs < range_to; range_offs++) {\n      // Calculate triangle area over three buckets\n      area = abs((point_a_x - avg_x) * (data[range_offs].canvasx - point_a_y) -\n        (point_a_x - data[range_offs].canvasy) * (avg_y - point_a_y)\n      ) * 0.5;\n      if (area > max_area) {\n        max_area = area;\n        max_area_point = data[range_offs];\n        next_a = range_offs; // Next a is this b\n      }\n    }\n\n    sampled[sampled_index++] = max_area_point; // Pick this point from the bucket\n    a = next_a; // This a is the next a (chosen b)\n  }\n\n  sampled[sampled_index++] = data[data_length - 1]; // Always add last\n\n  return sampled;\n}\n"]}